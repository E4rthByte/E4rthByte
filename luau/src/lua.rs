#![allow(
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    improper_ctypes,
    dead_code,
    unused_imports,
    deprecated,
    clippy::all
)]
/* automatically generated by rust-bindgen 0.71.1 */
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const LUA_USE_LONGJMP: u32 = 0;
pub const LUA_IDSIZE: u32 = 256;
pub const LUA_MINSTACK: u32 = 20;
pub const LUAI_MAXCSTACK: u32 = 8000;
pub const LUAI_MAXCALLS: u32 = 20000;
pub const LUAI_MAXCCALLS: u32 = 200;
pub const LUA_BUFFERSIZE: u32 = 512;
pub const LUA_UTAG_LIMIT: u32 = 128;
pub const LUA_LUTAG_LIMIT: u32 = 128;
pub const LUA_SIZECLASSES: u32 = 40;
pub const LUA_MEMORY_CATEGORIES: u32 = 256;
pub const LUA_MINSTRTABSIZE: u32 = 32;
pub const LUA_MAXCAPTURES: u32 = 32;
pub const LUA_VECTOR_SIZE: u32 = 3;
pub const LUA_EXTRA_SIZE: u32 = 1;
pub const LUA_MULTRET: i32 = -1;
pub const LUA_REGISTRYINDEX: i32 = -10000;
pub const LUA_ENVIRONINDEX: i32 = -10001;
pub const LUA_GLOBALSINDEX: i32 = -10002;
pub const LUA_TNONE: i32 = -1;
pub const LUA_NOREF: i32 = -1;
pub const LUA_REFNIL: u32 = 0;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
unsafe extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
unsafe extern "C" {
    pub fn __security_init_cookie();
}
unsafe extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
unsafe extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub const lua_Status_LUA_OK: lua_Status = 0;
pub const lua_Status_LUA_YIELD: lua_Status = 1;
pub const lua_Status_LUA_ERRRUN: lua_Status = 2;
pub const lua_Status_LUA_ERRSYNTAX: lua_Status = 3;
pub const lua_Status_LUA_ERRMEM: lua_Status = 4;
pub const lua_Status_LUA_ERRERR: lua_Status = 5;
pub const lua_Status_LUA_BREAK: lua_Status = 6;
pub type lua_Status = ::std::os::raw::c_int;
pub const lua_CoStatus_LUA_CORUN: lua_CoStatus = 0;
pub const lua_CoStatus_LUA_COSUS: lua_CoStatus = 1;
pub const lua_CoStatus_LUA_CONOR: lua_CoStatus = 2;
pub const lua_CoStatus_LUA_COFIN: lua_CoStatus = 3;
pub const lua_CoStatus_LUA_COERR: lua_CoStatus = 4;
pub type lua_CoStatus = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lua_State {
    _unused: [u8; 0],
}
pub type lua_CFunction =
    ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State) -> ::std::os::raw::c_int>;
pub type lua_Continuation = ::std::option::Option<
    unsafe extern "C" fn(L: *mut lua_State, status: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
pub type lua_Alloc = ::std::option::Option<
    unsafe extern "C" fn(
        ud: *mut ::std::os::raw::c_void,
        ptr: *mut ::std::os::raw::c_void,
        osize: usize,
        nsize: usize,
    ) -> *mut ::std::os::raw::c_void,
>;
pub const lua_Type_LUA_TNIL: lua_Type = 0;
pub const lua_Type_LUA_TBOOLEAN: lua_Type = 1;
pub const lua_Type_LUA_TLIGHTUSERDATA: lua_Type = 2;
pub const lua_Type_LUA_TNUMBER: lua_Type = 3;
pub const lua_Type_LUA_TVECTOR: lua_Type = 4;
pub const lua_Type_LUA_TSTRING: lua_Type = 5;
pub const lua_Type_LUA_TTABLE: lua_Type = 6;
pub const lua_Type_LUA_TFUNCTION: lua_Type = 7;
pub const lua_Type_LUA_TUSERDATA: lua_Type = 8;
pub const lua_Type_LUA_TTHREAD: lua_Type = 9;
pub const lua_Type_LUA_TBUFFER: lua_Type = 10;
pub const lua_Type_LUA_TPROTO: lua_Type = 11;
pub const lua_Type_LUA_TUPVAL: lua_Type = 12;
pub const lua_Type_LUA_TDEADKEY: lua_Type = 13;
pub const lua_Type_LUA_T_COUNT: lua_Type = 11;
pub type lua_Type = ::std::os::raw::c_int;
pub type lua_Number = f64;
pub type lua_Integer = ::std::os::raw::c_int;
pub type lua_Unsigned = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn lua_newstate(f: lua_Alloc, ud: *mut ::std::os::raw::c_void) -> *mut lua_State;
}
unsafe extern "C" {
    pub fn lua_close(L: *mut lua_State);
}
unsafe extern "C" {
    pub fn lua_newthread(L: *mut lua_State) -> *mut lua_State;
}
unsafe extern "C" {
    pub fn lua_mainthread(L: *mut lua_State) -> *mut lua_State;
}
unsafe extern "C" {
    pub fn lua_resetthread(L: *mut lua_State);
}
unsafe extern "C" {
    pub fn lua_isthreadreset(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_absindex(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_gettop(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_settop(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_pushvalue(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_remove(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_insert(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_replace(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_checkstack(L: *mut lua_State, sz: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_rawcheckstack(L: *mut lua_State, sz: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_xmove(from: *mut lua_State, to: *mut lua_State, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_xpush(from: *mut lua_State, to: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_isnumber(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_isstring(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_iscfunction(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_isLfunction(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_isuserdata(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_type(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_typename(
        L: *mut lua_State,
        tp: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_equal(
        L: *mut lua_State,
        idx1: ::std::os::raw::c_int,
        idx2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_rawequal(
        L: *mut lua_State,
        idx1: ::std::os::raw::c_int,
        idx2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_lessthan(
        L: *mut lua_State,
        idx1: ::std::os::raw::c_int,
        idx2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_tonumberx(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        isnum: *mut ::std::os::raw::c_int,
    ) -> f64;
}
unsafe extern "C" {
    pub fn lua_tointegerx(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        isnum: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_tounsignedx(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        isnum: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn lua_tovector(L: *mut lua_State, idx: ::std::os::raw::c_int) -> *const f32;
}
unsafe extern "C" {
    pub fn lua_toboolean(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_tolstring(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        len: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_tostringatom(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        atom: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_tolstringatom(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        len: *mut usize,
        atom: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_namecallatom(
        L: *mut lua_State,
        atom: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_objlen(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_tocfunction(L: *mut lua_State, idx: ::std::os::raw::c_int) -> lua_CFunction;
}
unsafe extern "C" {
    pub fn lua_tolightuserdata(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_tolightuserdatatagged(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_touserdata(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_touserdatatagged(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_userdatatag(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_lightuserdatatag(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_tothread(L: *mut lua_State, idx: ::std::os::raw::c_int) -> *mut lua_State;
}
unsafe extern "C" {
    pub fn lua_tobuffer(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        len: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_topointer(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_pushnil(L: *mut lua_State);
}
unsafe extern "C" {
    pub fn lua_pushnumber(L: *mut lua_State, n: f64);
}
unsafe extern "C" {
    pub fn lua_pushinteger(L: *mut lua_State, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_pushunsigned(L: *mut lua_State, n: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn lua_pushvector(L: *mut lua_State, x: f32, y: f32, z: f32);
}
unsafe extern "C" {
    pub fn lua_pushlstring(L: *mut lua_State, s: *const ::std::os::raw::c_char, l: usize);
}
unsafe extern "C" {
    pub fn lua_pushstring(L: *mut lua_State, s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn lua_pushvfstring(
        L: *mut lua_State,
        fmt: *const ::std::os::raw::c_char,
        argp: va_list,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_pushfstringL(
        L: *mut lua_State,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_pushcclosurek(
        L: *mut lua_State,
        fn_: lua_CFunction,
        debugname: *const ::std::os::raw::c_char,
        nup: ::std::os::raw::c_int,
        cont: lua_Continuation,
    );
}
unsafe extern "C" {
    pub fn lua_pushboolean(L: *mut lua_State, b: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_pushthread(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_pushlightuserdatatagged(
        L: *mut lua_State,
        p: *mut ::std::os::raw::c_void,
        tag: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn lua_newuserdatatagged(
        L: *mut lua_State,
        sz: usize,
        tag: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_newuserdatataggedwithmetatable(
        L: *mut lua_State,
        sz: usize,
        tag: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_newuserdatadtor(
        L: *mut lua_State,
        sz: usize,
        dtor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_newbuffer(L: *mut lua_State, sz: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_gettable(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_getfield(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        k: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_rawgetfield(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        k: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_rawget(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_rawgeti(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_createtable(
        L: *mut lua_State,
        narr: ::std::os::raw::c_int,
        nrec: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn lua_setreadonly(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        enabled: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn lua_getreadonly(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_setsafeenv(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        enabled: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn lua_getmetatable(
        L: *mut lua_State,
        objindex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_getfenv(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_settable(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_setfield(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        k: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn lua_rawsetfield(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        k: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn lua_rawset(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_rawseti(L: *mut lua_State, idx: ::std::os::raw::c_int, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_setmetatable(
        L: *mut lua_State,
        objindex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_setfenv(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn luau_load(
        L: *mut lua_State,
        chunkname: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
        size: usize,
        env: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_call(
        L: *mut lua_State,
        nargs: ::std::os::raw::c_int,
        nresults: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn lua_pcall(
        L: *mut lua_State,
        nargs: ::std::os::raw::c_int,
        nresults: ::std::os::raw::c_int,
        errfunc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_yield(L: *mut lua_State, nresults: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_break(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_resume(
        L: *mut lua_State,
        from: *mut lua_State,
        narg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_resumeerror(L: *mut lua_State, from: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_status(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_isyieldable(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_getthreaddata(L: *mut lua_State) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lua_setthreaddata(L: *mut lua_State, data: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn lua_costatus(L: *mut lua_State, co: *mut lua_State) -> ::std::os::raw::c_int;
}
pub const lua_GCOp_LUA_GCSTOP: lua_GCOp = 0;
pub const lua_GCOp_LUA_GCRESTART: lua_GCOp = 1;
pub const lua_GCOp_LUA_GCCOLLECT: lua_GCOp = 2;
pub const lua_GCOp_LUA_GCCOUNT: lua_GCOp = 3;
pub const lua_GCOp_LUA_GCCOUNTB: lua_GCOp = 4;
pub const lua_GCOp_LUA_GCISRUNNING: lua_GCOp = 5;
pub const lua_GCOp_LUA_GCSTEP: lua_GCOp = 6;
pub const lua_GCOp_LUA_GCSETGOAL: lua_GCOp = 7;
pub const lua_GCOp_LUA_GCSETSTEPMUL: lua_GCOp = 8;
pub const lua_GCOp_LUA_GCSETSTEPSIZE: lua_GCOp = 9;
pub type lua_GCOp = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn lua_gc(
        L: *mut lua_State,
        what: ::std::os::raw::c_int,
        data: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_setmemcat(L: *mut lua_State, category: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_totalbytes(L: *mut lua_State, category: ::std::os::raw::c_int) -> usize;
}
unsafe extern "C" {
    pub fn lua_error(L: *mut lua_State) -> !;
}
unsafe extern "C" {
    pub fn lua_next(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_rawiter(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        iter: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_concat(L: *mut lua_State, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_encodepointer(L: *mut lua_State, p: usize) -> usize;
}
unsafe extern "C" {
    pub fn lua_clock() -> f64;
}
unsafe extern "C" {
    pub fn lua_setuserdatatag(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
    );
}
pub type lua_Destructor = ::std::option::Option<
    unsafe extern "C" fn(L: *mut lua_State, userdata: *mut ::std::os::raw::c_void),
>;
unsafe extern "C" {
    pub fn lua_setuserdatadtor(L: *mut lua_State, tag: ::std::os::raw::c_int, dtor: lua_Destructor);
}
unsafe extern "C" {
    pub fn lua_getuserdatadtor(L: *mut lua_State, tag: ::std::os::raw::c_int) -> lua_Destructor;
}
unsafe extern "C" {
    pub fn lua_setuserdatametatable(L: *mut lua_State, tag: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_getuserdatametatable(L: *mut lua_State, tag: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_setlightuserdataname(
        L: *mut lua_State,
        tag: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn lua_getlightuserdataname(
        L: *mut lua_State,
        tag: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_clonefunction(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_cleartable(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_clonetable(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_getallocf(L: *mut lua_State, ud: *mut *mut ::std::os::raw::c_void) -> lua_Alloc;
}
unsafe extern "C" {
    pub fn lua_ref(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_unref(L: *mut lua_State, ref_: ::std::os::raw::c_int);
}
pub type lua_Hook =
    ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State, ar: *mut lua_Debug)>;
unsafe extern "C" {
    pub fn lua_stackdepth(L: *mut lua_State) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_getinfo(
        L: *mut lua_State,
        level: ::std::os::raw::c_int,
        what: *const ::std::os::raw::c_char,
        ar: *mut lua_Debug,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_getargument(
        L: *mut lua_State,
        level: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lua_getlocal(
        L: *mut lua_State,
        level: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_setlocal(
        L: *mut lua_State,
        level: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_getupvalue(
        L: *mut lua_State,
        funcindex: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_setupvalue(
        L: *mut lua_State,
        funcindex: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lua_singlestep(L: *mut lua_State, enabled: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn lua_breakpoint(
        L: *mut lua_State,
        funcindex: ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
        enabled: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type lua_Coverage = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        function: *const ::std::os::raw::c_char,
        linedefined: ::std::os::raw::c_int,
        depth: ::std::os::raw::c_int,
        hits: *const ::std::os::raw::c_int,
        size: usize,
    ),
>;
unsafe extern "C" {
    pub fn lua_getcoverage(
        L: *mut lua_State,
        funcindex: ::std::os::raw::c_int,
        context: *mut ::std::os::raw::c_void,
        callback: lua_Coverage,
    );
}
unsafe extern "C" {
    pub fn lua_debugtrace(L: *mut lua_State) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lua_Debug {
    pub name: *const ::std::os::raw::c_char,
    pub what: *const ::std::os::raw::c_char,
    pub source: *const ::std::os::raw::c_char,
    pub short_src: *const ::std::os::raw::c_char,
    pub linedefined: ::std::os::raw::c_int,
    pub currentline: ::std::os::raw::c_int,
    pub nupvals: ::std::os::raw::c_uchar,
    pub nparams: ::std::os::raw::c_uchar,
    pub isvararg: ::std::os::raw::c_char,
    pub userdata: *mut ::std::os::raw::c_void,
    pub ssbuf: [::std::os::raw::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lua_Debug"][::std::mem::size_of::<lua_Debug>() - 312usize];
    ["Alignment of lua_Debug"][::std::mem::align_of::<lua_Debug>() - 8usize];
    ["Offset of field: lua_Debug::name"][::std::mem::offset_of!(lua_Debug, name) - 0usize];
    ["Offset of field: lua_Debug::what"][::std::mem::offset_of!(lua_Debug, what) - 8usize];
    ["Offset of field: lua_Debug::source"][::std::mem::offset_of!(lua_Debug, source) - 16usize];
    ["Offset of field: lua_Debug::short_src"]
        [::std::mem::offset_of!(lua_Debug, short_src) - 24usize];
    ["Offset of field: lua_Debug::linedefined"]
        [::std::mem::offset_of!(lua_Debug, linedefined) - 32usize];
    ["Offset of field: lua_Debug::currentline"]
        [::std::mem::offset_of!(lua_Debug, currentline) - 36usize];
    ["Offset of field: lua_Debug::nupvals"][::std::mem::offset_of!(lua_Debug, nupvals) - 40usize];
    ["Offset of field: lua_Debug::nparams"][::std::mem::offset_of!(lua_Debug, nparams) - 41usize];
    ["Offset of field: lua_Debug::isvararg"][::std::mem::offset_of!(lua_Debug, isvararg) - 42usize];
    ["Offset of field: lua_Debug::userdata"][::std::mem::offset_of!(lua_Debug, userdata) - 48usize];
    ["Offset of field: lua_Debug::ssbuf"][::std::mem::offset_of!(lua_Debug, ssbuf) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lua_Callbacks {
    pub userdata: *mut ::std::os::raw::c_void,
    pub interrupt:
        ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State, gc: ::std::os::raw::c_int)>,
    pub panic: ::std::option::Option<
        unsafe extern "C" fn(L: *mut lua_State, errcode: ::std::os::raw::c_int),
    >,
    pub userthread:
        ::std::option::Option<unsafe extern "C" fn(LP: *mut lua_State, L: *mut lua_State)>,
    pub useratom: ::std::option::Option<
        unsafe extern "C" fn(s: *const ::std::os::raw::c_char, l: usize) -> i16,
    >,
    pub debugbreak:
        ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State, ar: *mut lua_Debug)>,
    pub debugstep:
        ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State, ar: *mut lua_Debug)>,
    pub debuginterrupt:
        ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State, ar: *mut lua_Debug)>,
    pub debugprotectederror: ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State)>,
    pub onallocate:
        ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State, osize: usize, nsize: usize)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lua_Callbacks"][::std::mem::size_of::<lua_Callbacks>() - 80usize];
    ["Alignment of lua_Callbacks"][::std::mem::align_of::<lua_Callbacks>() - 8usize];
    ["Offset of field: lua_Callbacks::userdata"]
        [::std::mem::offset_of!(lua_Callbacks, userdata) - 0usize];
    ["Offset of field: lua_Callbacks::interrupt"]
        [::std::mem::offset_of!(lua_Callbacks, interrupt) - 8usize];
    ["Offset of field: lua_Callbacks::panic"]
        [::std::mem::offset_of!(lua_Callbacks, panic) - 16usize];
    ["Offset of field: lua_Callbacks::userthread"]
        [::std::mem::offset_of!(lua_Callbacks, userthread) - 24usize];
    ["Offset of field: lua_Callbacks::useratom"]
        [::std::mem::offset_of!(lua_Callbacks, useratom) - 32usize];
    ["Offset of field: lua_Callbacks::debugbreak"]
        [::std::mem::offset_of!(lua_Callbacks, debugbreak) - 40usize];
    ["Offset of field: lua_Callbacks::debugstep"]
        [::std::mem::offset_of!(lua_Callbacks, debugstep) - 48usize];
    ["Offset of field: lua_Callbacks::debuginterrupt"]
        [::std::mem::offset_of!(lua_Callbacks, debuginterrupt) - 56usize];
    ["Offset of field: lua_Callbacks::debugprotectederror"]
        [::std::mem::offset_of!(lua_Callbacks, debugprotectederror) - 64usize];
    ["Offset of field: lua_Callbacks::onallocate"]
        [::std::mem::offset_of!(lua_Callbacks, onallocate) - 72usize];
};
unsafe extern "C" {
    pub fn lua_callbacks(L: *mut lua_State) -> *mut lua_Callbacks;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
